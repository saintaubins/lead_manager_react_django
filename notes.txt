pip install pipenv

pipenv shell

pipenv install django djangorestframework django-rest-knox

django-admin startproject leadmanager

cd leadmanager

python manage.py startapp leads

go to settings.py installed apps, insert: 'leads', 'rest_framework', 

go make a model in leads api, in class form

we need to now make a migration, python manage.py makemigrations, python manage.py migrate.

go into leads api, create serilizers.py and inster the Serializer class.

now make an api file in the leads api, called api.py

next we will create the urls, start with the root url.

then create a leads, url.py

we should now have a basic crud api, we can run the server.

after debug we can test it out with postman.

*****************************************************************

Now creating a react app from scratch not using npx.

Go to root directory of this folder.

we will need access to manage.py, so go into lead manager.

python manage.py startapp frontend

mkdir -p ./frontend/src/components

mkdir -p ./frontend/{static,templates}/frontend

cd ..

npm init -y

npm i -D webpack webpack-cli

npm i -D @babel/core babel-loader @babel/preset-env @babel/preset-react babel-plugin-transform-class-properties

npm i react react-dom prop-types

touch .babelrc, see file for the code

touch webpack.config.js, see file for the code

next go to package.json and make the scripts, see scripts section for the code.

next we will create index.js.

go to src folder and create index.js.

in components, create a file caled App.js, see App.js for the code.

next go templates/frontend, create a file called index.html

next go to bootswatch.com, go to download in cosmo, and grab http link

https://bootswatch.com/4/cosmo/bootstrap.min.css , and put that in index.html 

then go to gettbootstrap.com -> get started -> go to js section, and grab the script link, 
to get the js file, 

then go to settings.py and register frontend in installed apps. 

then go to frontend/views.py see file for code.

then create in frontend/urls.py see file for code.

then in lead manager urls.py add the just created url. 

after any debugging we should be all set, we added navbar, and a few react components.

**************************************************************************************

setting up redux. note npm server in off

npm i redux react-redux redux-thunk redux-devtools-extension

npm run dev

go to leadmanager/frontend/src -> create store.js see file for code

in src create a folder called reducers, and a file within called index.js see file for code.

then go to App.js in components, we want to import store, and Provider from reaxt-redux, and wrap the app
with a Provider.

next go back to rootreducer reducers in index.js and import leads, and export leads
then go into reducers and create a file called leads.js

follow flow to create actions, types.js etc.

in actions folder create a leads.js

before we continue, stop server and install axios.

npm i axios, now restart server

now to call the component, go to components/leads/Leads.js is where we call this from.

everything should be working, after adding html to Leads.js,

now to give functionality to the delete button, got to actions leads.js

create and import the delete method, then go to types file, and create as well.

then go to leads reducer, and create delete there. once that is completed, we need to go to Leads.js

and import deletelead, and add the functionality for the UI, don't forget to export delete lead as well.

test everything should work.

**********************************************************************************************
 
 now to add work to the lead from.

go to components/leads/Form.js 

follow through until all errors are gone

********************************************************************************************

we are now working on Error handleing and alerts, we need a few components.

npm i react-alert react-alert-template-basic react-transition-group

npm run dev

then go to app.js and bring in the provider, and dependencies.

See alertoptions, in app js how to set up alertprovider, alerttemplate, etc...

now we are making an alert components.

in components/layout create a file called Alerts.js

in reducers create a new file called errors.js , and import that into index.js which is  the root reducer.

we will have a new type, so in actions/types.js create a new type for errors

then in the errors reducer, we will need to import get errors, see errors.js

then go into leads action, we are going to adjust the error to catch the error, and not just console.log index.html

we should be able to see the errors state in the redux dev tool,
from here we have to import connect in Alerts.js

after adding all dependencies, we should see everything works.

*********************************************************************************************

we are now going to add a delete notification message.

go to reducers and create a new file called messages.js, see file for code.

then go to types, and create the types, see types for the code.

then we have to add to the root reducer, index.js in reducer

then in actions, create a new file called messages.js, see file for code.

then we go into actions/leads, and import createMessage, what we just created in messages.js 

and in the deleteLead, we can dispatch a ceate message.

once done go to Alerts.js in components/layout, and in mapstatetoprops, add the message state, and proptype above.

see code for minor details.

**************************************************************************************************

now lets do the same for when a lead is added.

so in leads.js lets copy the delete lead dispatch with the message, put it into add lead method.

then in alerts, we can check for lead added.

*************************************************************************************************

we will be dealing with accounts now, and creating a new api.

In the backend we go to leads/models.py.

We will import the User table, and assign a owner field, with a foreignkey.

then python manage.py makemigrations, then migrate. then run server.

then go to api.py and define the queryset, and permissions. see the file.

next we will add the errors to the frontend. so we go to frontend/actions/leads.js

in the get leads we will dispatch the get errors.

in messages.js, same folder we will create a functions to return error mesages.

then go back to leads, and bring in the error function just created in the messages file.

and then replace the console.log with the dispatch statement.

we should see we cannot get data wthout being logged in. 

*********************************************************************************************

now off to the backend again, settings.py add 'knox' to installed apps, and REST_FRAMEWORK dictionary.

then run another migration.

we next need to create serializers, for bringing in the leads. this could be done in the leads app, but we will be creating another app called accounts.

so we run python manage.py startapp accounts.

then go to settings.py and add the accounts app.

go to the accounts app, and create a serializers.py file. see file for the code.

then we need to create an api file just like in leads, see api.py for code.

then make a urls.py file in account to create an endpoint.

then create the urls just created in main url, in lead manager.

we will then try to register a user with postman.

we will set the post request to  http://localhost:8000/api/auth/register, note no froward slash.

post request should now work.

now lets go to serializers.py

lets include the login serializer, see code for details.

once we have a login serializer we need to create a login api, in api.py.

once that is in, we have to create an endpoint in urls.py. see file for code.

then we can to to postman and make a post request to the login endpoint. http://localhost:8000/api/auth/login

with username and password, we should get authernticated.

next we will be creating a get user api. in api.py. see code for details, then we need to create an end point in urls.py.

we can verify this works in postman, with a get request to the user endpoint. 
http://localhost:8000/api/auth/user  and in headers put authorization and value put Token token we just got from the login in the previous post request

we should get back the user as a response.

last thing in this section is to create a log out, we can inport a view for that in urls.py.

see the logout line for invalidating the user token. we can also test this on postman.


**************************************************************************************

next we will be setting up Auth state, and private routes, so off to the front endpoint.

npm i react-router-dom

npm run dev

go to app.js, and import some stuff from react router, then insert switch and route in the return render path.

go to components, and create a folder called accounts.

inside accounts, create a file called Login.js, and Register.js.

we will start with register, rce tab, and add a little bit of state, see file for code.

we will do the same for the login page with some subtle differences, see file for code.

now we go to app.js and create routes for the pages just created.

once in the routes, we need to add the links to the navbar, so we go to components/layout/Header.js

see code for details.

****************************************************************************************

next we will be making an auth reducer to add to statement.

go to index.js inside reducer folder, and add auth as import and export.

and in the same folder create a file called auth.js

from the basic code, we should be able to see state in the redux tool, for the auth reducer.

we will be making a private route for people who are not logged in.

so we go to components, and create a new folder called common. In common, create a file called PrivateRoute.js.

see code, but for now if user is not authenticated, we will be redirected to the login page. 

*******************************************************************************************


now we need to check if user is logged in we need to check the state and we will implement this in app.js.

but first we will go to actions/types.js as we are using redux.

we will add 3 types, 
export const USER_LOADING = 'USER_LOADING';
export const USER_LOADED = 'USER_LOADED';
export const AUTH_ERROR = 'AUTH_ERROR';


then we go to reducers/auth.js and add the functions to do these actions. 

so now we have those lets create in out action folder, a file called auth.js 

we need to call this all the time so we go to app.js, and call everything we just did in there. 

import auth, and add the lifecyle method componentdidmount and define this.

for now we imported all neccessary data to validate a user, next we will setup, frontend authentication.

*******************************************************************************************

we will now creata an action to log in, we will now go to actions, auth.js, but before we do that we will add 2 new tyes in types.js
export const LOGIN_SUCCESS = "LOGIN_SUCCESS";
export const LOGIN_FAIL = "LOGIN_FAIL";

just created login in auth.js, see code for details.

we will now move to the reducer. so we go to reducers/auth.js

we just imported LOGIN_FAIL, and LOGIN_SUCCESS, and defined what we want to happen in the case statements.

we now need a way to call this, so we go to components/acccounts/Login.js

we need a way to interact with redux, so we will import connect, proptypes, and login

then after we will define mapstatetoprops, all the way at the bottom, then export default connect.

*********************************************************************************************

next we added login logout logic to the UI, see Header.js.

we will now implement the functionality in actions/auth.js.

but first we will create another type called LOGOUT_SUCCESS, then create the function in auth.js

**********************************************************************************************

the flow using redux seems to be, 
1. create types, in types.js
2. go to actions, in auth.js import the types, and define the actions, we are currently working with register action
3. got to reducer auth, and figure out what we need to do in there.
4. then to call it, we need to go to the register component, called Register.js.
5. in this case we  brought in some logic from login js, but modified it.
6. we created a new alert, so we went to Alerts.js and created a passwordsnot match alert. 
7. finally we verified frontend authentication.

























